凄腕エンジニアと一緒に働いて学んだ技術以外の大切なこと
#業界研究 






はじめに
運が良いことに自分は今、今まで出会ってきたエンジニアの中で一番凄いと思う人と一緒に働けています。

今の会社で働けていてよかったな〜と日々感謝しつつ、一緒に働いている中でたくさんのことを勉強させていただいています。

そしてそろそろアウトプットせねば！（使命感）と思いこの記事を書いています。
今回は技術以外のことで学んだこと、大切だと思ったことを書いていきます。

（この記事の中で凄腕エンジニアさんのことはTさんと呼ぶことにします。）
（どれくらい凄いのかも本当は書きたいですが、この記事の目的とは離れてしまうので省略します。。。）
（本当は【凄腕エンジニア】という言葉でくくりたくないくらいすごいエンジニアさんです。。。）

ドメイン知識、業務知識の大切さ
今自分が参加しているプロジェクトではTさんが業務要件の整理やヒアリング、システムの設計、DBの設計を手掛けているのですが、

ドメイン知識というか業務知識の深さがすごく、その深さが業務要件のヒアリング、システムの設計、UIの設計、DBの設計等々ににじみ出てるんです。

現場の人と同じくらい知識があるので、現場の人が何が辛いのか、どうしてほしいのかなどが手に取るようにTさんにはわかるんです。

システムの改善案やこういう機能あったら嬉しいですよね？という提案なども的確で、業務知識やドメイン知識を深めることが使いやすいシステムの開発につながっていくんだなというのが身にしみてわかりました。

今まで自分はコードの書き方であったり、フレームワークの使い方であったり、設計であったりと技術力的な方面を重要視していたのですが、今回のプロジェクトを通して、ドメイン知識や業務知識を深める大切さを学びました。

（なので、今話題のニトリの1年半の現場研修もちょっと長い気もするな〜くらいで結構理解はできてしまう派でした。。。）

使いやすさを突き詰める姿勢
Tさんから
「脳死で操作できるUIじゃなきゃだめだよ。例え寝不足でもどんなときでも操作ミスしないような、そんなUIじゃなきゃだめだよ」
「他のプロダクトを押しのけてでも使いたいと思ってもらえるかどうか」
と言われたのを鮮明に覚えています。

自分自身開発をしていく上で、普通に使えて普通に動いていればよかったと思っていた面が多分にあったのですが、この言葉を聞いてはっとさせられました。

今では自分自身の中でいいUIかどうかの基準になっています。

それとTさんは、普段から
「どっちがユーザーさんが嬉しいかな？」
「どうすればユーザーさんが一番うれしいかな？」
「こういうふうにするとユーザーさん嬉しいと思うので！」
「これがあるとユーザーさん嬉しいんですよね〜」
というような言葉が自然と口から出ていて、徹底してシステムを使ってもらう人目線で考えることが当たり前になっており、本当に尊敬です。
自分もユーザーさんが一番うれしい形を追求、提供していきたいです。

それとTさんの言葉でもう一つ印象に残ってるものがあって、
【利用者に成り切り、演じて、痛みを一緒に被る】
という言葉です。

利用者に成り切ってシステムを触ってみて、利用者と同じ痛みを被ることで、改善点が見え、早く直さねば、改善せねばいけない！という気持ちになります。
本当の意味で自分事化してシステムを作るために必要なマインドだと思っています。

【何度も同じことを聞いていい、何度でも答えるから】というポリシー
これは本当にありがたかったです。
Tさんにはプロジェクト当初から
「いくらでも、例え同じ質問でも何回でもしてくれて大丈夫なので！」
と声をかけていただいていて、そのおかげで質問のハードルがとても下がり、気兼ねなく質問をすることができました。

今のチームではGatherというアプリをよく使っていて、テキストではなく直接対面で質問ができる環境だったので、スムーズに質問できました。

そして＋αで周辺の知識の話やもっとこうしたほうが良いよという話まで聞けて勉強になって、ありがたかったです。
（Tさんはテキストで質問するより直接質問してもらった方が早いし伝えやすいので。。。という人で、なおありがたかったです。）

そうなってくるとチーム内ではTさんに対してだけではなくて、自分に対しても質問いいですか？というコミュニケーションをとってもらえたり、自分からTさん以外のメンバーに質問をしにいったりと、質問しやすい環境が出来上がり、本当にTさんのポリシーのおかげだったなと思っています。
（こういう環境作りはスクラムマスター（@YUM_3）が良いチームづくりに力を入れてくれていた部分もとても大きいです）

もしもTさんが「質問はテキストだけで、同じ質問はしないでください」というような人だったら今のチームの質問しやすい環境はなかったと思いますし、それにより開発の効率も下がってしまっていたと思います。

自分にも後輩ができたら、Tさんと同じポリシーで接していきたいと思っています。
（質問されやすい雰囲気つくること重要）

設計は思いやりが大切
これはちょっとだけ技術的な話が入ってきたり使いやすさを突き詰める姿勢の話にも近いのですが、Tさんのコードや行動などを見ていると思いやりがとても重要だなと感じています。

例えばコードを書くときも
「他の人が読んだらどう思うかな？読みやすいかな？」
「この機能が改修するってなったら改修しやすいかな？」
こういうふうに相手を思いやれるかどうかでコードの綺麗さや質が変わってくると思っています。

Tさんの書いたコードはめちゃくちゃ改修しやすいんです。
issueのタイトルだけみたらとても大変そうなのに、いざ改修してみるとあれ？ここだけの修正でいいの？ってなります。
こういう体験は、開発中に他の人が自分のコードを改修する姿まで見えているからこそ生み出せるものなのだろうなと思っています。

思いやりについてはUIを考える上でも重要です。
そのシステムや機能が使われるコンテキストをしっかりと考慮し、システムを使って貰う人のことを想像して、
こういう機能あったらいいよね？
こういう文言あったらわかりやすいよね？
こういうステータスで検索できたらいいよね？
などなどこういうところまで考えられるかどうかで使いやすいシステムになるかどうかが決まるといっても過言ではないのかなと思っています。

最後に
記事を書きながら思ったのですが、Tさんは場面場面で徹底的に相手に成り切る力が凄いんだと思いました。
（根本的にドメイン知識や業務知識、技術力が凄いのはもちろん。。。）

システムの設計をするときはシステムを使ってもらう人に成り切り、コードを書くときは自分ではない他の開発者に成り切って、こうだったら嬉しいよね、こうだったら辛いよねというふうに徹底的に考えることができるのが、Tさんが圧倒的な価値提供をできている要因の一つなのだろうと思っています。

そしてシステムを使ってもらう相手に成り切るためには、ドメイン知識や業務知識が必要なので、技術力だけでは良いシステムは作れないということをこのプロジェクトで身にしみてわかったのはとても良かったです。

自分もTさんみたくなれるように、この記事に書いたことを日々意識していき、本当に使いやすいシステムを作れるエンジニアになれるように研鑽していきます。

ここまで、記事を読んでいただきありがとうございました！






------------------------------------------------------------------------------------------------------------------------------------------------

Twitter APIの制限に打ち勝つ(力業)
#Python 


はじめに
突然ですが皆さんはTwitterというSNSをご存じでしょうか。
ここを住処にしている方も多くいらっしゃることと思います。

さて、数か月前はなんとかマスクさんが買収したとかで話題になり、有料サービスなどTwitterの環境もどんどん変わってきています。
しかし、変わってほしくなかったもの、それはTwitterAPIの仕様です。

Twitter APIの変化
もちろんなくなったわけではなく、改悪有料化したのです。その結果、これまで無料でツイートしてきたBotたちが軒並みサービス終了に追いやられました。
ひらがなをランダム３文字でつぶやいてみたり、タイムラインを学習してつぶやく蒸し料理がいたりなど、彼らBotがいてこそのTwitterだったのではないかとしみじみ感じます。

ところで、エンジニアの皆さん、こうは思ったことありませんか？

Webページも結局はAPI叩いているんだから、それを使えるのではないか

私もある時これに気付きました。そこで、今回は無料のままTwitterAPIを使うを目標に調査・試行錯誤を行ったのでここに記します。

敵を知る
ツイート作成API
まずはここから始めるのがいいでしょう。親の顔より見たChromeの開発者ツールとにらめっこしながら、ツイートを作成した時に発行されるAPIを探します。


さて、あからさまな名前のAPIがありました。メソッドもPOSTで間違いなさそうです。こちらのBodyは


test2という実際に送ったツイートの内容も確認できますね。

さて、ここで１つ問題が生じました。１枚目の画像を見てわかる通り、GraphQL(データベース)へのクエリURLが動的になっていますね。
Twitterのアーキテクトを構築したNick氏が書いたTwitterに関する資料1によると、地域や時間によって保存するデータベースを切り替えているということです。
これで上の問題も納得がいきますね。

このクエリIDを取得する必要がありますね。さすが、一筋縄ではいきません。

ありました。
これはページが読み込まれた際にヘッダで読み込むJSファイルの中に存在しているようです。

作戦
ではこれまでの結果を踏まえて、ツイートまでの流れを整理しましょう。

https://twitter.com/homeをGETしてqueryIDを取得
queryIDをもとにhttps://twitter.com/i/api/graphql/{queryID}/CreateTweetにPOST
というフローになります。2に関してはユーザー認証が必要なので、一度ブラウザでログインしたCookieを持ってくるか、コード上でログインしてCookieを取得するかの２択になります。

今回は簡易のため前者で行います。(後者版作ってくれた人がいたら載せます！！他人頼り)

queryIDの取得
https://twitter.com/homeをGETして得られたHTMLソースの中から、mainxxxx.jsというJSのURLを特定し、そのJSファイルの中のqueryIDを取得します

とれました

ツイートの発行
https://twitter.com/i/api/graphql/{queryID}/CreateTweetにPOSTする際のBodyは以下のようになっています。

とりあえず大事なのはvariables.tweet_textですね。この部分がツイートの内容になります。ほかの部分を見る感じ、ツイートの場所や画像などいろいろ調整できそうですが、今回はこのままで送ります。
認証にはBearerとCSRFトークンが使用されているので、Cookieと合わせてHeaderもうまく調整します。

実際にリクエストしてみましょう。コード内のXXXXXにはご自身の値を使ってください。
できましたとさ

最後に
頼むから無料で使わせてくれ！！！！！

今回使用したコード全体は以下より。

------------------------------------------------------------------------------------------------------------------------------------------
最初から強いやつの特徴

#初心者 #プログラミング

はじめに
どんな仕事でも強い人は存在する。
でも最初から強い人は珍しい。
これは、web 業界に身を置いてみて、信じられないくらいムキムキになっていった人たちを見てきた私が送る こうしたら強くなれるかもしれない？指南書である。もしエンジニア職に興味があるのであれば、一考になるかもしれない。

最初から強いやつの特徴
平日の稼働時間以外も勉強 or 開発する
土日も勉強 or 開発する
公式ドキュメントをちゃんと読む
以上のような当たり前のことは、最初から強い人じゃなくてもやるので特徴に入れません。

1. 読解能力が異常に高い
国語の力です。
これは、ちゃんとドキュメントに書いてあることが理解できると同義です。
そしてこれが本当に大事です。
強い人に質問すると必ず「ん？ Docs 読んだ？」って聞いてきます。私は (...読んだわ！) って内心思ってますが、それは読んだだけです。内容をちゃんと汲み取れてない可能性が非常に高いです。　
強い人が同じドキュメントを読むと、「ほら、ここに書いてあるじゃん。」って必ずいいます。
2. 「そもそもそれいるん ？」を臆せずに言える
タスクをアサインされたら、何がなんでもその通りにしないといけない！ という強迫観念に苛まれることがあります。
それは幻想らしいです。
「そもそもそれやる必要あるん？」という呪文を強い人はみんな何故か口を揃えて詠唱してきます。
これは最終的なゴールがちゃんと見えているからこそ言えると思っています。
3. タスクを適切な粒度で実行する
タスクのスコープが広範囲すぎると、自分でもゴールを見失いやすく、レビュワーも「これ何をレビューすればいいの？」という大変不幸な状態になります。
また、スコープが広いので、実装に時間がかかってしまい、どうしても停滞している感が否めなくなってきます。
最初から強い人は、何故かこのタスクの粒度設定が信じられないくらいうまいです。タスクが大きすぎたり難しすぎたりすると、細かくタスクを分割し、周りの人の協力を得ながら、着実に階段を登って行きます。
ベテランのエンジニアと一緒にストーリーの作成をするとき、抽象的なイメージでモヤモヤしている状態から、明確にストーリーが出来上がってくる様は、ある種の感動を覚えます。最初から強い人は、ベテランのエンジニアと同じ視点を持っていると思っています。
4. 優先順位を理解している
これはベテランになればみんな到達するかもしれないですが、最初からできる人はなかなかいません。
でも最初から強い人は不思議とできます。
ゴールが明確に見えている証拠ですね。
5. Log をちゃんと追える
これも強い人は何故か最初からできる。
というか何で最初の頃はあんなにできなかったんだろうってくらい私はできなかった。
そして error 箇所がわかったら、その内容をググるんだけど、強い人たちは、見に行くところが共通している。もう、びっくりするくらい一緒。
公式ドキュメント
GitHub の Issue
6. 最下層に到達できる
コードを書いていると、「多分間違ってないけど上手くいかない...」的なことが私にはよく発生します。(100 % 間違っているから動かないんですが...)
それは、誰かが作った関数は絶対正しい！という前提で進めているからそういうことが起きます。
どんなに優秀なエンジニアが作ったものでも疑いましょう。
直に書いてあるソースならば、「ああ、ここがおかしい」と気づきますが、こと Library で使っている関数は無条件スルーをしてしまいます。
しかし最初から強い人は、Library であろうがなんであろうが、その関数が「何やってんねん？」 というところまで潜っていきます。それは公式ドキュメントや Github の該当ソースコードまで潜って何をしているかという事実を集め、問題の切り分けにいかします。
7. 横着な commit をしない
これは 3 と似ているが、確実にできるようになったところで一旦 commit するというものです。
そのまま変更を commit せずに開発すると、うまく動作しなくなったときに、どこで躓いたかのかが分かりづらくなり、速度が落ちてしまいます。
強い人は綺麗な commit メッセージを残す。
補足します。
これは、横着な commit をすると、commit するメッセージがとても長くなってしまいます。すると、その commit メッセージを書くのがだるくなって、私は fix hoge とか add fugaFunction etc とかだけにしてしまいます。
それは、一気に機能を実装しているから(横着しているから)よくない commit メッセージになります。
綺麗な commit メッセージとは、何を実装したのかを過不足なく記すということです。
これは、人にもよるのですが、強い人とペアプロをするとよくわかります。非常に綺麗です。
8. 質問がまとまっていて回答しやすい
ちょっと当たり前すぎて入れるか迷ったけれど、特徴なので入れます。
何がわからないかを言語化するというのは、思っている以上に難しいです。
今どこまでできているのか？ そして何ができていないのか？ できないことに対しては、何が障壁になっているのか？ どういうアプローチを実践してみたのか？ を簡潔に文書に起こす力が必要です。
自分だけなのかもしれないのですが、私は説明を端折る癖があり、いっつも PM に「5W1H を適切につけて説明してくれ...」と呆れられます。(とは言っても PM はエスパーなので高確度で捕捉してくれるんですが...)
自分の中にしか前提条件はありません。
最初から強い人は、誰が聞いたって意味が一意に決まるものの言い方 or 書き方しかしません。
9. 新しいことに対して一切物怖じしない
羨ましい限りである。
どうしても私は「うわっ！」って思ってしまう。
強い人たちは「ちゃんと読めばわからないわけがない」というマインドもさることながら、常に何か新しいことを探していて、隙あらば使おうとしている。（個人ではすでに使用している。）
「もう動くから今のままでええやん..」というのは普通の人の考え方である。
強くなるには？
強くなるには上にあげたようなことをすれば、多分強くなれると思います。
加えて、私が大事だと思っていることを書きます。

強い人とディスカッションする

これは凡人にとって非常に有効です。
我が社には Boot camp という制度があるのですが、これは、Java をベースとしてプログラミングの大事な概念やオブジェクト指向を勉強し、強い人に理解度をチェックしてもらうというものです。
この強い人が強すぎて大抵の理解度チェックはボコボコにされ、1 回ではなかなか pass できません。
ちなみに以前の記事 Web 業界に参入して 1 年経ったけど、なにしてきたん？ でもちらっと書いたんですが、私はクラスとインスタンスの章で 3 回やり直しをくらいました。
しかし、このディスカッションを経て、正解に辿り着いた時には新しい自分に出会えます。
読解力の低い人間は、ちょっと本を読んだくらいでは、その真髄に辿り着くことはできません。
強い人は、弱い人がわかるレベルにまで落として基本となる概念を説明してくれます。
なので、できるなら強い人にたくさんのことを聞きましょう。
頑張っている人は、夢中になっている人には勝てない

これは私の PM の言葉ですが、我々が強くなるには最も有効かもしれません。
結局、夢中になれるからこそ、今の自分がいると思っています。
最後に
ここにあげたものはあくまでも私の観測範囲内のことで、サンプル数が少なすぎますが、参考になれば幸いです。また、思いついたらこっそり継ぎ足していきます。

最後まで読んでいただきありがとうございました。




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
【JavaScript】配列・オブジェクトをコピーする時に、イコール(=)で代入しちゃダメなの、なぁぜなぁぜ？

#JavaScript #初心者 

はじめに
この記事ではJavaScriptの配列・オブジェクトを正しくコピー(複製)する方法を紹介します
初歩的な内容ですが、筆者が初見殺しに会った為、備忘録として共有します
この記事の対象者
現在JavaScriptを学ばれている方
これからJavaScriptを学ばれる方
NGパターン
以下は配列「arr1」のコピー(複製)を作るソースコードです。

const arr1 = [10, 20];
const arr2 = arr1; // 代入によるコピー

console.log(arr1);
console.log(arr2);
以下、実行結果です。

> [10, 20]
> [10, 20]
コピーは出来てそうですね。

ただ、これは危険な書き方です。
何が危険なのでしょうか？それは...

配列のイコール(=)による代入は参照渡しとなる
上述NGパターンについて、arr2[0]の値を変えてみます。

const arr1 = [10, 20];
const arr2 = arr1;

arr2[0] = 30;

console.log(arr1);
console.log(arr2);
以下、実行結果です。

> [30, 20]
> [30, 20]
コピー先(arr2)の値を変えるとコピー元(arr1)の値も変わってしまう、
俗に言う参照渡しになっていますね！！

これは予期せぬ挙動と成り得るので修正しましょう。

じゃあどうすれば？
いくつか方法はありますが、この記事ではその中で最も直感的に分かり易かった
スプレッド構文(後ほど補足します)を使用します。

スプレッド構文以外の手法について
参考 【JavaScript】配列を複製する
まずは修正後のプログラムを見てみましょう。

const arr1 = [10, 20];
const arr2 = [...arr1];  // スプレッド構文

arr2[0] = 30;

console.log(arr1);
console.log(arr2);
以下、実行結果です。

> [10, 20]
> [30, 20]
コピー先(arr2)のみが変更されました。めでたしめでたし。

補足
スプレッド構文とは？
スプレッド構文は本来、配列・オブジェクトの前に「...」を記述することで、展開した要素内の値を出力するものです
ES2015(ES6) で追加された機能で、現在では全てのブラウザで対応しています
const arr1 = [10, 20];

console.log(arr1);     // [10, 20]
console.log(...arr1);  // 10 20
今回紹介したスプレッド構文を使って配列をコピーする方法は、展開した値から新しい配列が生成されたということですね。

オブジェクトも代入で参照渡しとなってしまう
配列同様にスプレッド構文を使用することで参照渡しを回避することができます。

代入によるコピー(オブジェクト)
const obj1 = {val1: 10, val2: 20};
const obj2 = obj1; // 代入によるコピー

obj2.val1 = 30;

console.log(obj1);  // {val1: 30, val2: 20}
console.log(obj2);  // {val1: 30, val2: 20}
スプレッド構文を使用したコピー(オブジェクト)
const obj1 = {val1: 10, val2: 20};
const obj2 = {...obj1};

obj2.val1 = 30;

console.log(obj1);  // {val1: 10, val2: 20}
console.log(obj2);  // {val1: 30, val2: 20}
まとめ
配列・オブジェクトはイコール(=)で代入すると、参照渡しになってしまう
代入ではなく、スプレッド構文を使おう！



--------------------------------------------------------------------------------------------------------------------------------------------------------------
ネットワークスペシャリスト合格メモ

#ネットワークスペシャリスト


ネットワークスペシャリストに合格した
一応証書
経歴
3年シスオペで夜勤
ノースキルノーライフに耐えられなくなりAWS SAA取ってSIerに転職
2年クラウドとオンプレを行ったり来たり
AWS,GCP,Azureとまんべんなく
CI/CDの構築なども
どうして取った
AWSの資格はあるものの、ネットワークの知識があいまいであり、体系的に知らないとどこかで恥をかくと思った
DNSでいえばRoute53が簡単すぎ、簡単すぎるが故にオンプレでのBindの設定で発狂したことがある
分からないことに対して、どう調べていいのかが分からなかった、本質的な理解が足りていれば分かったはず
どうやって取った
3か月前
ネットワークスペシャリストドットコムで何も分からないまま5年分連打して解凍丸暗記した
わくスタ本を何も分からないまま通読して雰囲気を掴んだ
2か月前
午後1を解いて絶望し、わくスタ本の解説を読んで理解できずに絶望した

左門導師本を4年分購入して理解に努めた
午後2を解いて再び絶望したが、圧倒的分量から問題そのものが参考書になるので、よく読むように気を付けたところ、問題の勘所のようなのが見えてきた

IPAの試験は国語といわれるが、問題文を要約して答えれば得点になる問題があるので、勘所を養うのがいい、左門導師はそれを導いてくれるので結局6年分購入して2周した
1か月前
勉強に飽きた。解くのが嫌になった。なのでネスペイージスを読んだり、左門導師のブログを読んで、勉強した感じになることをした。
2週間前
ヤバそうなところのネスペイージスを読んだり1回解いた問題の2週目3周目を行った
これが出たら諦めようを潰していった
Wi-Fi
IP電話
IPSec
AWSとGCPをIPSecで繋いでみたりみたりしてみた
SSL-VPN
当日
緊張してあんまり寝られなかった(かわいい)

午前1

応用情報で免除
午前2

ケーブルの種類とか出て発狂しかけたが6割まんまの問題が出た
計算問題もまんまでたから計算しないで埋めた、おいしい
午後1

1と3を選択した
1は訳が分からない機器が出たが、よくあるタイプの問題
3はKerberosが出て、初出の場合簡単っぽいので、あえて突入した
4割くらい何となくで埋めて落ちたことを確認した
午後1は難しいのか下駄がついた得点(68)だった
午後2

1がどう考えても無理そうで途中で2に切り替えた
コンテナの問題だった、ネスペは標準なので、Dockerとは明記されてない(VZやLXCもあるし) が、ECSのコンソール画面がありありと見えて、勝ちを確認した
簡単だったのか逆下駄で63点だった、ギリギリだが合格は合格
総評
勉強する価値のある資格だと思った、標準規格に沿っているのが好感、実務に活かせるかといわれたらIPSecのConfig(リキー頻度や暗号化方式)が分かるようになる程度だが、視野が広くなった
3か月バッファとると飽きるので、勉強は2か月前で良かった
資格全般に言えるが、取ってからが始まりなので、現在の環境で慢心せずに転職しようと思った
次は
迷ってるが、データベースも何となくで仕事してるので、データベーススペシャリストやろうかなと曖昧に申し込んだ

----------------------------------------------------------------------------------------------------------------------------------------------------------

配慮のできないエンジニアとの付き合い方



リモートワーク中ワイ
ワイ「あーーー！！！」
ワイ「ストレスが溜まるんじゃ〜〜〜！！！」
ワイ「株式会社ゆめみで働くのは、ストレスが溜まるんじゃ〜〜〜！！！」

娘（7歳）「パパ、どうしたの？」

ワイ「いや、あのな？」
ワイ「パパの会社には、エンジニアが沢山おんねん」

娘「知ってるよ」
娘「社員の大半がエンジニアだもんね」
娘「200人以上いるよね」

ワイ「せやねん」
ワイ「そんで、エンジニアってのは、性格にクセのある奴が多いねん」

娘「へ〜」
娘「それで、何がストレスなの？」

ワイ「あのな？」

ズバズバ物を言うエンジニア
ワイ「周囲への配慮をせずに、ズバズバ物を言う奴がおんねん」
ワイ「何人もおんねん」
ワイ「それで、周りの人たちは傷ついてると思うねん」

娘「なるほどね」

ワイ「そういうズバズバな奴らがムカつくねん」
ワイ「けしからんねん」

娘「でも、パパも昔はそんな感じだったよね」
娘「自分が正しい！と思ったら、相手の気持ちも考えずに正論で殴って」
娘「職場での人間関係を破壊してたじゃん」

ワイ「ぐぬぬ・・・せや」
ワイ「でもワイはそれで何度か失敗したから、そういうけしからん生き方はやめたんや」

娘「なるほどね」

「ズバズバ言う自分」を、後ろに下げる
「相手に配慮する自分」を、前に出す
娘「↑こういうことをしたわけだね」

ワイ「せや」

娘「ユング心理学で言う、シャドーってやつだね」

ワイ「シャドー？」
ワイ「何が？」

娘「パパが後ろに下げた『ズバズバ言う自分』がシャドーだね」

ワイ「なるほど、封印した自分というか」
ワイ「それをシャドーと呼ぶんやね」

娘「そうそう」
娘「そして、パパが今ムカついているのは『シャドーの投影』だね」

ワイ「シャドーの投影・・・」
ワイ「え、ワイが何か投影してたん？」

自分がやめた生き方を、相手の中に見ている
娘「パパは、昔ズバズバ言い過ぎて人間関係を壊したから」
娘「そういう生き方はダメだ！って封印したんでしょ？」

ワイ「せやな」

娘「自分が『よくない！』と気づいて封印した生き方があって」
娘「それを他人がやっていると『けしからん！』と感じる」

ワイ「せや」
ワイ「大人なのに、まだそんな生き方してんの？」
ワイ「レベル低っ！って思うんや」

娘「つまり、昔の自分、やめた自分を」
娘「相手の行動の中に見ているってことだね」

ワイ「あぁ」
ワイ「やめた自分、封印した自分、つまりシャドーを」
ワイ「相手に投影してるわけか」

娘「うん」

ワイ「でも、そんなこと言われても、ムカつくもんはムカつくわ」

娘「じゃあまずは、パパが楽になる方法を考えよ」

黒歴史の自分を許す
娘「パパは、ズバズバ言ってた昔の自分をどう思う？」

ワイ「そんなん、決まってるわ」
ワイ「黒歴史や」
ワイ「その頃の失敗が、今でもフラッシュバックすることがあるわ」
ワイ「なんであの時、あんな風に、正論で殴ってしまったんや〜〜〜！って」

娘「なるほどね」
娘「でも、私に言わせると、今のパパも微妙だよ？」
娘「忖度おじさんだよ」

ワイ「ファッ！？」

娘「周囲に配慮し過ぎて、言うべきことも言えなくなっちゃってるじゃん」

ワイ「た、確かに・・・」
ワイ「この会議、やたら長いな〜、意味あんのかな〜、とか」
ワイ「思ってても言えへんわ」
ワイ「相手を否定したら、傷つけてしまいそうやから・・・」
ワイ「昔のワイなら言ってたかもしれんけど」

娘「だから、むしろ昔みたいに、ズバッと言うべき時もあるんだよ」
娘「つまり、昔のズバズバ言ってたパパにも、良い部分はあったんだよ」

ワイ「そう・・・なんかなぁ」

ズバズバの中にも、メリットはあった
娘「そうだよ」
娘「ズバズバ言うってことは、例えば───」

世の中の同調圧力やマジョリティを気にせず、正しいと思ったことを言える
クライアントに対しても物怖じせず、断る場面では断ることができる
娘「↑こういうメリットがあるじゃん」

ワイ「まぁ、よく言えばな」

娘「そう考えると、そこまで全否定することでもなくない？」

ワイ「まあな」
ワイ「フラッシュバックするほど、昔の自分を否定しなくてもよかったんかもな」

娘「そうだよ」
娘「逆に、ズバズバな自分を封印したせいで」

相手を否定する意見全般を言えなくなった
娘「↑こういうデメリットだってあるわけだし」

ワイ「せやな」
ワイ「ズバズバも配慮も、要はバランスが大事ってことやな」

娘「そう」
娘「たった数回の失敗という、少ないサンプルを元に」
娘「全否定することでもなかったんだよ」

ワイ「せやな〜」
ワイ「ほんま人生、何も分からへんわ」
ワイ「いろんな人間に転生して、20回くらい人生を体験できたら」
ワイ「完璧な生き方を習得できそうやけど」
ワイ「たった一生分の、わずかなサンプルじゃあ」
ワイ「人生の答えなんて、何も分からへんわ」
ワイ「もう40年も生きてきたというのにな」

娘「そうだね」
娘「たった40年分の、わずかな失敗のサンプルを胸に抱いて」
娘「怯えながら生きてるんだね」

ワイ「そんな感じかもな」
ワイ「でも、さっき娘ちゃんが───」

「昔のズバズバ言ってたパパにも、良い部分はあったんだよ」

ワイ「こう気づかせてくれたから、少し楽になったわ」
ワイ「楽にはなったけれども・・・」

何も解決してなくね？
ワイ「あれ、ワイの悩みは何も解決してないんちゃうか？」
ワイ「ズバズバ言うエンジニアたちがムカつく件」
ワイ「そんでストレスが溜まる件」

娘「う〜ん」
娘「でも、それも少しは改善されるんじゃないかな？」
娘「パパはさっき、自分のシャドーについてこう思ったわけじゃない？」

「ズバズバも配慮も、要はバランスが大事ってことやな」

ワイ「うん」

娘「ズバズバにも、良い部分がある」
娘「そう思えた訳でしょ」

ワイ「せやで」
ワイ「これからは、相手の立場や気持ちに配慮しつつも」
ワイ「言うべきことはバシッと言う」
ワイ「ズバズバと配慮を使い分けるハイブリッドおじさんになって行くで」

娘「それを『シャドーの統合』って言うんだけど」

ワイ「シャドーの統合・・・」

封印していた自分を「統合」する
娘「シャドー、つまり封印してたズバズバな自分を」
娘「少しだけ取り戻して、ハイブリッドに使ってくってことだね」

ワイ「なるほど、封印してた自分を、今の自分に統合するんやね」

娘「そうそう」

ワイ「んで？」
ワイ「封印した自分を少しだけ取り戻すと、ムカつきが治まるん？」

娘「治まらないかもしれないけど」
娘「相手に対して、今までより公正な評価ができるようになるかもね」

ワイ「？？？」

娘「今までのパパは、過去のトラウマから」
娘「配慮しない奴は悪！と思い過ぎてた」
娘「ズバズバ物を言う奴は、レベルが低い！と過小評価してた」

ワイ「う・・・まぁな」
ワイ「ズバズバを嫌うあまり、そこにばかりフォーカスを当てがちになってたわ」

娘「でも、本当は相手にも良いところがある」

ワイ「まぁ、すごく頭の良い人たちではあるしな」
ワイ「技術力も高いしな」

娘「そうだね」
娘「ズバズバ言ってしまうこと、配慮が少ないこと」
娘「そこにばかりフォーカスを当てるんじゃなく」
娘「相手の良いところも公正に見れたらいいんじゃないかな」

ワイ「なるほどな〜」
ワイ「逆に、言いにくいことをズバッと言ってくれる貴重な存在でもあるしな」

娘「そうだね」

ワイ「過去の自分を少し許せたことで」
ワイ「目の前の相手のことも、公正に評価できる・・・」
ワイ「そういう効果、あるかもやなぁ」

娘「うん」
娘「相手の良いところ、尊敬しているところも伝えた上で」
娘「もっと、こうなって欲しい、ってことも伝えたらいいんじゃないかな」

ワイ「そうかもな」
ワイ「信頼関係ってやつやな」

娘「うん」

ワイ「ワイだって、ワイのことを褒めたことない奴からのフィードバックは」
ワイ「絶対に受け入れへんもん」
ワイ「どんなに正しい意見だとしても！」

娘「そ、それもどうかと思うけど」

ワイ「とにかく色々と勉強になったわ」
ワイ「ありがとうやで、娘ちゃん」

その日の夜
ワイ「はぁ〜、でも逆に自分が嫌になってきたわ」

娘「なんで？」

ワイ「だって、ズバズバ言うタイプの人を、過剰に嫌ってしまってたんやもん」
ワイ「そんな自分に気づいてしまったんやもん」
ワイ「過去の自分の失敗を憎むあまり、180度の方向転換をしてしまって」
ワイ「逆に間違った方向、極端な方向に向かってしまっていたわ・・・」

娘「そうだね」
娘「でも、それでいいんだよ」

ゴールは誰にも分からない
娘「正しい方向、ちょうどいい方向・・・」
娘「そんなの、誰にも分からないからね」
娘「失敗して、失敗して、失敗して」
娘「だんだんと方向を絞って行くしかないんじゃないかな」

ワイ「でも、何度も失敗するのはなぁ・・・」

娘「むしろ何度も失敗した方がいいんだよ」
娘「人生なんて、運の力も大きいんだから」
娘「何度でもサイコロを振った人が、夢を掴むんだよ」

ワイ「うぅ・・・娘ちゃん」
ワイ「なんか、ありがとうやで・・・」

まとめ
なんらかの理由で、過去に封印した生き方がある
その生き方を未だにやっている人を見るとムカつく
封印していた自分にも、良い面があったんだと思うと救われる
片方の面ばかりにフォーカスせずに、公正に評価できるようになりたい
〜おしまい〜


--------------------------------------------------------------------------------------------------------------------------------------------------
君はVS Codeのデバッグの知られざる機能について知っているか

#初心者 #プログラミング

はじめに
こんにちは、kenです。
GWに「暇だな～～、こんな日はVS Codeの公式ドキュメントを読むか！w」と思って何気なく読んでたらデバッグに関して知らない機能がいくつかあったので、今回はそれをご紹介したいと思います。
おそらく今から紹介する機能はあまり知られてないと思います。もし全部知ってたらVS Code完全理解者なので誇ってください。（！？）

以下に記載する内容はVS Codeの公式ドキュメントのDebuggingという章を参考にしています。

注意
これから紹介する機能は言語によって使えたり、使えなかったりします。
今から紹介する機能のデモはすべてPythonで行おうかと思ったのですが、上記の理由からPythonではサポートされていない機能についてはJavaScriptやC++で代用しました。
デバッグで使える便利な機能
ログポイント機能
行を指定しログポイントを追加すると、その行を訪れたタイミングでログを出力できます。
もちろんログ内には{式}という書式を使えば式も含めることもできます。
既存のコードに修正を加えることなく、ログを出力できるのは嬉しいですね！！
これで 「プリントデバッグしたprint行を消し忘れてPRあげちゃった……」 みたいなことがなくなりそうです。

ログポイントを設定する方法は、ログポイントを出したい行の行番号の左側で右クリックし「ログポイントを追加」を選択。その後出したいログの内容を入力するだけです。
追加したログポイントは赤い◆のマークで表され、出力したログはデバッグコンソールから確認できます。

上の例では1から（引数で受け取った）Nまでの総和を計算するプログラムのなかで、その段階的な計算結果をログとして出力させています。

ヒットカウント機能
行を指定しヒットカウント機能を使ってブレークポイントを設定すると 「その行をN回目に訪れたタイミングでブレークポイントを発動させる」 といったことが可能になります。
これで 「for文の中のi == 15のときの挙動がみたいんだよ～～（ｶﾁｶﾁｶﾁｶﾁ）」 みたいにひたすらデバッグの再生マークを連打する虚無タイムからは卒業できそうです。

ヒットカウント機能を使ってブレークポイントを設定する方法は以下の通りです。
まず、ブレークポイントを設定したい行の行番号の左側で右クリックします。次に、「条件付きブレークポイントを追加」を選択し、プルダウンメニューから「ヒット カウント」を選びます。最後に、何回目にその行を訪れた時にブレークポイントが発動するかを指定して設定を完了します。
上の例では（先ほどと同じ）プログラムの中でres += iの行を3回目に訪れるタイミングでブレークポイントが発動するようにヒットカウント機能を設定しています。

条件付きブレークポイント機能
条件付きブレーク機能では、ブレークポイント設定時に条件式を入力し、その条件式がtrueになったタイミングでブレークポイントが発動するようにできます。
「この値が〇〇になったタイミングでなにかバグってるはずなんだよな～～」 という場合に重宝しそうです！！

条件付きブレークポイントは、ブレークポイントを設定したい行の行番号の左側で右クリックをし「条件付きブレークポイントの追加」を選択。その後プルダウンメニューから「式」を選び、そこに条件式を入力することで設定できます。

上の例では条件式としてres == 15を設定しています。するとデバッグ実行時にres == 15がtrueとなったタイミング、すなわちi == 5まで計算し終わったタイミング1でブレークポイントが発動しています。

インラインブレークポイント機能
ブレークポイントは行単位ではなく、ステートメント単位で設定することもできます。
ひとつの行に複数のステートメントが存在してる場合に便利です。

インラインブレークポイントはステートメントの先頭でShift + F9を押すことで設定できます。
上の例では

変数aを初期化する
aをインクリメントする
aを出力する
という3つのステートメントが含まれていますが、そのひとつひとつにブレークポイントを設定しているため、そのそれぞれでブレークポイントが発動しています。

関数ブレークポイント機能
関数ブレークポイント機能を使えば 「指定した関数名に到達したタイミングでブレークポイントを発動させる」 といったことができます。
「呼び出されてる関数名はわかるけど、それがどこで書かれてるのかわからん！！」 という場合に使えそうです。

関数ブレークポイントはブレークポイントセクションヘッダーの+ボタンを押して関数名を入力することで作成できます。作成すると、関数ブレークポイントはブレークポイントセクションに赤い▲で表示されます。

上の例では、sum_to_Nという関数名で関数ブレークポイントを設定したことで、（sum_to_Nの関数内部にブレークポイントを設定していないのにもかかわらず）実際にsum_to_Nに到達したタイミングでブレークポイントが発動しています。

データブレークポイント機能
データブレークポイント機能を使うと、指定した変数の値が変更/読み取り/アクセスされた場合にブレークポイントを発動させることができます。
「この値いつ変更されてんねん！」 という場合に一つずつステップ実行する必要がなくなるので便利です。

データブレークポイント機能はデバッグセッション時の変数セクションから変数を選んで右クリックし、「値が変更されたときに中断する」を選択することで設定できます。
上のGIF画像で動かしているのは、0から100までの5の倍数の総和を計算するプログラムです。
最初に変数resにデータブレークポイントを設定したため、resが更新されるタイミング、すなわちiが5の倍数であるときに限ってブレークポイントが発動しています。

デバッグコンソール
デバッグコンソールでは、デバッグ中にプログラムの実行を制御し、コード内の変数や式の評価を行うことができます。
つまり、ステップ実行中の変数の状態をより詳細に確認することができるということです。

デバッグコンソールを使う方法は、デバッグセッション時にデバッグコンソールに移動して確認・評価したい変数や式を入力するだけです。
上の例では、ステップ実行中に式をいろいろ入力してデバッグコンソールに出力させています。デバッグ中の変数の状態でi + 10などの式が評価されているのがわかると思います。
（最初iを出力させようとしたときはまだiが宣言される前だったのでエラーが出ています。）

おわりに
今回はVS Codeのデバッグについて、あまり知られてないと思われる機能をご紹介しました。かなり痒いところまで手が届く機能ばかりで、やはり何に関しても公式のドキュメントを読むのは大事だなと感じさせられました…
間違いなどありましたらコメントにてご指摘いただけますと幸いです。
最後まで読んでいただきありがとうございました！！

----------------------------------------------------------------------------------------------------------------------------------------------
フリーWi-Fiを使ったら秘密情報を抜かれる経路にはどのようなものがあるか

#セキュリティ

ゴールデンウィークのはじめ（4月29日）に投稿された以下のツイートですが、5月7日20時において、1,938.8万件の表示ということで、非常に注目されていることが分かります。
こちらも124.1万件の表示ということで、非常に注目されました。多くの反応を頂きましたが、意外に難問ということのようで、ゴールデンウィーク明けにいくつか漏洩経路を紹介したいと思います。
無線LANに対する攻撃
やはり「スタバのFreeWi-FIを使いながら」という前提ですので、無線LANの脅威から説明します。一般に無線LANの脅威というと、「暗号化されていない無線LAN」を思い浮かべる方も多いと思いますが、フリーWi-Fiの多くは「暗号化されていても盗聴される」問題があります。それは、無線LANのパスワード（事前共有鍵、パスフレーズ）が公開されているためです。以下の記事が参考になります。

パスワードが公開された公衆無線LAN、暗号化されていても盗聴できる？ | 日経クロステック（xTECH）

また、偽アクセスポイント、すなわち攻撃者がカフェのWi-Fiを偽装したアクセスポイントの脅威があります。本物のアクセスポイントと同じSSIDとパスワードを設定した偽アクセスポイントは、悪魔の双子（Evil Twin）（英語版WikiPedia）と呼ばれ、利用者からは本物と区別することが非常に難しく大きな脅威となります。以下、カフェのWi-Fiに対する脅威の代表例として、偽アクセスポイントを用いて説明します（下図）。
偽アクセスポイントの場合、上図の有線LANの部分で盗聴ができるので、無線の暗号化は関係ありません。また、中間者攻撃（man-in-the-middle attack; MITM）が可能になるので、攻撃のバリエーションが広がります。

いずれの場合でも、通信路がHTTPS(TLS)で暗号化されていれば、簡単に通信内容が盗聴できるわけではありません。しかし、サイト等に脆弱性が存在する、あるいは利用者の使い方が間違っていると通信内容が漏洩する可能性があります。

HTTPSを使わずに接続した
利用サイトがHTTPSに対応していない、あるいはHTTPS対応のサイトだが利用者がHTTPで接続してしまった場合、上記の方法で通信内容はすべて盗聴されます。
今どきHTTPSを使っていないサイトは稀だと思いますが、中間者攻撃でHTTPに誘導される可能性があります。下記の動画では、某メガバンクのオンラインバンキングサイトに対して、中間者攻撃でHTTP接続して通信内容が漏洩する模様をデモしています。このサイトはHTTP通信をHTTPSにリダイレクトしていますが、これを回避する攻撃を行っています。またサイト側がTCP80番ポートを閉じていても、この攻撃は可能です。詳しくは下記の動画を参照ください。

この攻撃への対策は、下記となります。

サイト側: HSTS(Strict-Transport-Security)（MDNの解説）の設定によりHTTPSを強制する
利用者側: HTTPSで接続していることを目視確認する
httpsなURLに接続したがブラウザの警告を無視する操作をした
利用者がHTTPSで接続をしていても、攻撃者がBurp SuiteのようなMITMプロキシを用いている場合は、Burp Suite側でHTTPSを一旦復号して、再暗号化するという方法で通信内容を盗聴することができます。しかし、この場合ブラウザ上でエラーとなり、利用者が強いて警告を無視する操作をしなければ通信は継続できません。先の動画でも、この様子をデモしています。

この攻撃の対策は下記となります。

サイト側: HSTS(Strict-Transport-Security)（MDN）を設定すると証明書エラーを無視できなくなる
利用者側: ブラウザでの証明書エラーが表示されたら利用を停止する
動画で紹介したメガバンクでは、HSTSの設定はありませんでした。
ブラウザではなく専用アプリで利用したが、そのアプリに証明書検証を行わない脆弱性があった
ブラウザではなくスマホアプリ等でサービスを利用する場合、証明書の検証はアプリ側の責務となります。たまに、アプリ側の証明書検証が十分でなく、盗聴を許してしまう場合があります。筆者が見つけた例を下記に示します。

Android版KindleにおけるSSLサーバ証明書の検証不備の脆弱性CVE-2014-3908 | 徳丸浩の日記

対策は下記のとおりです。

提供側: スマホアプリ等の脆弱性診断により証明書検証を確実にする
利用者側: 信頼できるアプリを使う or アプリ使用時はモバイルデータ通信を利用する
サーバーにて脆弱な暗号アルゴリズムの使用を許してしまう脆弱性がある
TLS/SSLの仕様上あるいは実装上の脆弱性が発見されることがたまにあります。この代表例がPOODLE脆弱性です。詳しくは、はるぷさんの解説記事をご覧ください。

SSL v3.0の脆弱性「POODLE」ってかわいい名前だけど何？？ | BLOG - DeNA Engineering

この記事でも解説されていますが、POODLEの攻撃にはMITMが使われるので、カフェの偽アクセスポイントでの攻撃は典型的ケースと言えます。言い換えれば、MITMの危険性がない環境ではPOODLEの現実的な脅威はない、ということになりますが、POODLEの脅威のため、SSLというプロトコル自体が使用停止になりました。
対策は下記のとおりです。

サイト側: TLS 1.2以上のみを有効にして、SSL実装（OpenSSL等）を常に最新の状態に保つ
利用者側: 最新のブラウザを用いる（最新のブラウザはSSLを無効化している）
CookieのSecure属性欠落
ウェブアプリケーションの脆弱性によっても、通信内容が盗聴される場合があります。その代表例がCookieのSecure属性欠落です。すなわち、Set-Cookieする際にSecure属性をつけておかないと、平文通信の際にCookieが盗聴されるというものです。
詳しくは下記のブログ記事や動画を参照ください。

HTTPSを使ってもCookieの改変は防げないことを実験で試してみた | 徳丸浩の日記
サイト側の対策は下記となります。CookieのSecure属性欠落は脆弱性診断で頻繁に指摘されています。

CookieにSecure属性を設定する（根本的解決策）
HSTSを設定する（緩和策）
利用者側の対策は難しいので、以下くらいかと思います。

信頼できるサイトを用いる
公衆無線LANの利用を避ける
セッションIDの固定化(Session Fixation)攻撃
セッションIDの固定化という攻撃方法があります。詳しくは以下の記事を参照ください。

安全なウェブサイトの作り方 - 1.4 セッション管理の不備 | 情報セキュリティ | IPA
とくまるひろしのSession Fixation攻撃入門 | 徳丸浩の日記
この攻撃の過程で「悪意ある人があらかじめ用意したセッションIDを、何らかの方法で利用者に送り込み」というステップが必要になります。すなわち、攻撃者が用意したCookieを利用者に送り込む必要があります。「そんなことができるのか」と思われる方が多いと思いますが、MITMだとそれができます。以下の記事や動画で解説しています。

HTTPSを使ってもCookieの改変は防げないことを実験で試してみた | 徳丸浩の日記（再掲
サイト側対策は下記の通りです。

セッションIDの固定化対策として、ログイン直後にセッションIDを変更する（根本的解決策）
Cookieの接頭辞を用いる（MDNの解説）（緩和策）
HSTSを設定する（緩和策）
一方、セッションIDの固定化脆弱性を一般の利用者が見破ることは困難なので、利用者側の対策としては以下くらいではないかと思います。

信頼できるサイトを用いる
公衆無線LANの利用を避ける
セッションIDの固定化脆弱性は最近珍しくはありますが、脆弱性診断ではたまに指摘されています。

ファイル共有を有効化していた
Windowsにはネットワークプロファイルという機能があり、パブリックあるいはプライベートに設定することができます。公衆無線LANの場合はパブリックにする必要があります。まちがってプライベートに設定している場合ですが、以下の脅威があります。

公共の場で無線LANを利用するときに、このファイル共有機能が有効になっていると、他人からパソコンやスマートフォン内のファイルが読み取られたり、ウイルスなどの不正なファイルを送りこまれたりすることがあります。公共の場で無線LANを利用する際には、必ずファイル共有機能を解除しましょう。
無線LANの安全な利用｜基本的な対策｜一般利用者の対策｜国民のための情報セキュリティサイト より引用

ウイルス感染自体は公衆無線LANを使ってなくても可能性のあることですが、偽アクセスポイントに接続することで、感染するウイルスの可能性が増えます。その典型例がWannaCryです。WannaCryはtcp/445ポートに対する攻撃により感染するので、ファイアウォールで守られたネットワークでは通常感染はしませんが、偽アクセスポイントに接続し、ネットワークプロファイルをプライベートに設定していると、感染の可能性が増えます。
下記の動画では、偽アクセスポイントの利用を想定して、WannaCryが悪用するWindowsの脆弱性 MS17-010の攻撃と、パソコンからのファイル共有経由での漏洩をデモしています。
利用者側対策は下記となります。

公衆無線LANに接続する場合はネットワークプロファイルをパブリックに設定する
ソフトウェアを最新の状態に保つ
また、この種の攻撃はVPNでは防御できない場合が多いです（ノートンセキュアVPNにて検証）。VPNを使っている場合でも上記対策は怠らないようにしましょう。

ショルダーハッキング
ショルダーハッキングというのは、端末を操作している近くの人が画面やキーボード操作を覗き見するという意味で、その際に「肩越しに覗く」イメージからショルダーハッキングと命名されていますが、当然ながら覗き見は肩越しとは限りません。

参考: ソーシャルエンジニアリングの対策｜社員・職員全般の情報セキュリティ対策｜企業・組織の対策｜国民のための情報セキュリティサイト

対策は、下記となります。

のぞき見防止フィルターの使用
周囲に人がいる場合はパスワードやクレジットカード情報の入力を避ける
ショルダーハッキングは、元ツイートの「スタバのFreeWi-Fiを使いながら」という点は関係ないので、題意に沿っているかは微妙なところです。

離席中の攻撃
カフェ等では、パソコンを自席に置いたまま離席する人がたまにいます。確かにカフェでのトイレというのは結構悩ましい問題でして、貴重品やパソコンは持っていくにしても、飲み物は放置してよいのか、でも飲み物をトイレに持ち込みたくないという深刻な(?)問題があり、気の弱い私などは「カフェではトイレを我慢する」という、あまり健康にはよろしくない（かもしれない）対応をしています。
さて、パソコンを置いたまま離席すると、当然ながらパソコンを盗まれる可能性がありますし、その際に画面を開いたままですと、簡単にログイン中のサイトやパソコンの中のファイルを盗み見されます。また、パソコンを盗まれないまでも、離席中のパソコンにキーロガーその他のマルウェアを仕込まれるという可能性もあります…ただ、怪しいことこの上ないので、むしろパソコンごと盗む方が手っ取り早いとは思います。
この種の攻撃も、「スタバのFreeWi-Fiを使いながら」という点は関係ないので、題意に沿っているかは微妙です。

対策としては、当然下記となります。

カフェなどではパソコンを放置したまま離席しない
ではどうすればよいか
働き方改革が進んだ結果、カフェ等のオープンスペースで仕事をすることは推奨されているようでもありますし、Appleシリコン搭載のMacBookがむやみに電池のもちがよいので、カフェでも使いたいというのは当然の心理かと思います。しかし、上記のような脅威もありますので、以下に注意しつつ利用するのがよいかと思います。

HTTPS接続していることを目視確認する
サイト利用時はブラウザに予め登録したブックマークを用いる
TLS証明書のエラーを無視しない
ソフトウェアを常に最新に保つ
Windowsの場合、ネットワークプロファイルをパブリックに設定する
カフェ等では機密性の高いサイトは利用しない
信頼できる（脆弱性対策されているであろう）サイトを用いる
テザリング等、別の通信手段を用いる
覗き見防止フィルターを用いる
カフェなどではパスワードやクレジットカード番号の入力を避ける
パソコン等を自席に放置したまま離席しない

--------------------------------------------------------------------------------------------------------------------------------------------------
JavaとJavaScriptは

#Java #JavaScript

JavaとJavaScriptは○○と△△ぐらい違うというネタが好きすぎるので投稿(n番煎じ)

個人的に好きなものだけ載せてます。思いつき次第追加していくつもりです。

メロンとメロンパンぐらい違う
有名ですけど僕はあんまりこれは違いを実感できないんじゃないかと思ってます。インドとインドネシアも似た感じ。

グレープとグレープフルーツぐらい違う
個人的に優勝しているやつです。次の点がいいです。

JavaScriptがJavaにあやかっているようにグレープフルーツもグレープにあやかっている
「Javaのスクリプト」「グレープはフルーツ」みたいな言葉遊び的要素がある
グレープジュースを頼んでグレープフルーツジュースが出てきたら僕なら怒る → 違いが実感しやすいし現実生活で起こりうる
VisualStudioとVisualStudio Codeぐらい違う
「JavaはVSではないものの統合開発環境があったほうがよく、JSはVSCodeで十分」みたいな感じで対称性がよく出ているように思えます。

GitとGitHubぐらい違う
逆に「GitとGitHubはJavaとJavaScriptぐらい(それ以上?)違うよ」って教えてあげるといいかもしれません。

Minecraft Java EditionとMinecraft Pocket Editionぐらい違う
Java版のmodはJavaで、PE版のmodはJavaScriptで作成されるのでちょうど良い対称になっています。

電気通信大学と電通と大阪電気通信大学と東京通信大学と東京電機大学ぐらい違う
ごっちゃにしていた人は反省してください。電気通信大学はこの中で唯一国立(くにたち)の近くにある国立(こくりつ)の大学です。

大学と大学院ぐらい違う
大学院進学のための奨学金制度、大学より乏しいですよね。ケチ。

.NET Frameworkと.NET Coreぐらい違う
これで半日潰しました

そばと焼きそばぐらい違う
この例えだとTypeScriptがかた焼きそばになるのでその点は好きです。


-----------------------------------------------------------------------------------------------------------------------------------

Qiitaのマークダウンで新しいコンテンツの埋め込みを使えるようにする方法

#その他

この記事は何
Qiitaのマークダウンは↓のqiita-markdownというライブラリでコンテンツのサニタイズなどを行っています。
こちらはOSSで公開されているため、自分が使いたい埋め込みスクリプトなども、必要な実装を行い、PRを出せば利用が可能になります。

この記事では、具体的にどのような実装を行うと良いかをまとめていきます。

qiita-markdownとは
まず実装について説明する前に、qiita-markdownがどのようなライブラリなのかを説明します。
qiita-markdownはQiitaのMarkdownをHTMLに変換する処理に実際に使っているMarkdownパーサーです。
Markdownの中には、HTMLのスクリプトタグなども自由に記述することができるのですが、Qiitaは不特定多数のユーザーがMarkdown記事を投稿できるため、悪質なスクリプトなどを投稿できないように、HTMLタグをサニタイズしています。

ただ、Qiitaの中でも使っても問題ないスクリプトタグなどは、ホワイトリスト形式でサニタイズをスキップしています。

つまり、qiita-markdownで使いたい埋め込みタグがある場合、qiita-markdownにそのタグをホワイトリストとして追加する必要があります。

ホワイトリストには、以下の二つがあります。

scriptタグやiframeタグに指定できるURL
scriptタグやiframeタグに指定できる属性
この二つのホワイトリストに、埋め込みたいタグの条件に合わせて実装を追加することができればQiitaでの利用が可能になります。（正確にいうと、実装を追加後、gemのリリース→Qiita内でのバージョンアップが必要なため、少しタイムラグはあります）

埋め込みタグのホワイトリスト追加の流れ
ホワイトリストに追加する流れを説明します。

ホワイトリストに追加する埋め込みタグの定義を行う
↑のように、lib/qiita/markdown/embed/内に、埋め込みタグの定義を行います。

URL以外に、特定のdata属性なども設定する必要がある場合は、↓のようにそれぞれ設定するようにしましょう
lib/qiita/markdown/transformers/filter_*.rb のURLホワイトリストに定義したURL、HOSTを追加する
追加したい埋め込みタグがiframeの場合は lib/qiita/markdown/transformers/filter_iframe.rbに、追加したい
埋め込みタグがscriptの場合はlib/qiita/markdown/transformers/filter_script.rbのホワイトリストに定義したURL、HOSTを追加しましょう。

定義した属性をホワイトリストに追加する
lib/qiita/markdown/filters/user_input_sanitizer.rbに新たに許容したい属性がある場合は追加を行いましょう。すでに許容されていた場合は、特に触る必要はありません。

テストを書く
追加したホワイトリストが正しく動いているか、テストを書きます。
qiita-markdownではrspecを用いてテストを作成しています。
↓のように、spec/qiita/markdown/processor_spec.rbにテストを追加します。
最後に
Qiitaのmarkdownの処理はOSSとして公開しているため、誰でも使いたいタグなどを追加することができます。
使っている中で使いにくいところや、そもそもの処理を追加する中での不便さなどがあれば、ぜひフィードバックをいただけると嬉しいです。

Devトークも公開しているので、もし直接お話ししたい場合は気軽に「話したい」をお願いします！



------------------------------------------------------------------------------------------------------------------------------------
